//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""GroundMovement"",
            ""id"": ""5bc4dbad-82e5-45a9-b17c-888c8620cc8d"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""PassThrough"",
                    ""id"": ""696a79b1-063b-4a53-aade-2861e572e008"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d23d1126-4766-4e0e-b6d8-2d87d2a25ac4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slide"",
                    ""type"": ""Button"",
                    ""id"": ""92f2396b-6a7b-4d74-b8fd-4fe83e29e935"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""95f12e3e-1dfa-482a-a75c-5a11d4e64435"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dd8b9dea-f272-4073-8b96-ac4d2c1fcc58"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""5aa62cdb-0a33-4c5a-99ab-ee07c676f3f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c5f6fc3f-76b4-450a-b71a-314e4f8cd2ff"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bbf09408-0902-4b55-a8a6-769568438ce0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""54c7464b-0d55-4b0b-94d3-2334873a2d6f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""54971da0-7e67-405d-8f54-bcf806a997df"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""abdb840e-1925-4ae5-bd09-eea9517184a8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b0af84e6-7c27-4003-b86a-c60d80bb0556"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69ebd141-ce6d-41f7-a0b9-9f0c81641ec4"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17311639-aa3b-4a95-8eec-0b044aee3510"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a888ddf4-3e1b-4f63-a69c-18ee9ce3af37"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""854fac86-09e6-4628-9ac8-d85e7ac9267e"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""5a3a7986-46eb-41ca-a43f-2e28e755f34c"",
            ""actions"": [
                {
                    ""name"": ""toggleMenu"",
                    ""type"": ""Button"",
                    ""id"": ""1420bbf6-2203-4d39-8c15-4a499dd8fa9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scoreboard"",
                    ""type"": ""Button"",
                    ""id"": ""ad31c06f-8d95-428c-b7fd-b1ceb89a0c37"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""265a4208-3826-4ed3-954c-2b508609a94d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""toggleMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be8881e1-66cb-4f0a-9904-ca03eedcf5a6"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scoreboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Chat/Voice"",
            ""id"": ""5ba46511-ea77-478d-a62c-266c44330848"",
            ""actions"": [
                {
                    ""name"": ""Chat"",
                    ""type"": ""Button"",
                    ""id"": ""7ebd99ea-a182-4649-98e9-d2a47721fa92"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Voice"",
                    ""type"": ""Button"",
                    ""id"": ""862a8c19-5f9c-440d-b1db-efa446516788"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""717c5392-9218-4578-998a-427129573fcc"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b01f24f-7f7b-4720-8d7a-c6eedf4fe1d8"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Voice"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Weapon"",
            ""id"": ""21dc20f7-79c3-4cb0-ae40-4bf3aa460314"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""ba8074c3-ae17-463d-bf62-73107651e8d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ADS"",
                    ""type"": ""Button"",
                    ""id"": ""3b383477-b839-47ae-a69f-06e722878344"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""26488508-b425-450e-85aa-b07367b1aabb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""c3f577c3-af0b-449b-81be-a1c1a9a79014"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Knife"",
                    ""type"": ""Button"",
                    ""id"": ""4486e386-82a1-48ac-bd86-265e214f11f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BuyScreen"",
                    ""type"": ""Button"",
                    ""id"": ""0715d955-6039-41c2-a9aa-b99e40fdacbe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dadc8c4e-0988-4358-b815-25ea9e9119a9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41b17f59-66b4-411c-87a2-50f83effb98e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ADS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6e56ce5-6310-449a-8045-20a430f50fb2"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1eb63c2-53d2-4673-adc1-18e864384d08"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b09a6eae-a2ae-44c4-8a13-f4d001b086a3"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Knife"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf633221-fd23-4ba4-bb2d-1fba7123cd27"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuyScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GroundMovement
        m_GroundMovement = asset.FindActionMap("GroundMovement", throwIfNotFound: true);
        m_GroundMovement_Horizontal = m_GroundMovement.FindAction("Horizontal", throwIfNotFound: true);
        m_GroundMovement_Jump = m_GroundMovement.FindAction("Jump", throwIfNotFound: true);
        m_GroundMovement_Slide = m_GroundMovement.FindAction("Slide", throwIfNotFound: true);
        m_GroundMovement_MouseX = m_GroundMovement.FindAction("MouseX", throwIfNotFound: true);
        m_GroundMovement_MouseY = m_GroundMovement.FindAction("MouseY", throwIfNotFound: true);
        m_GroundMovement_Dash = m_GroundMovement.FindAction("Dash", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_toggleMenu = m_UI.FindAction("toggleMenu", throwIfNotFound: true);
        m_UI_Scoreboard = m_UI.FindAction("Scoreboard", throwIfNotFound: true);
        // Chat/Voice
        m_ChatVoice = asset.FindActionMap("Chat/Voice", throwIfNotFound: true);
        m_ChatVoice_Chat = m_ChatVoice.FindAction("Chat", throwIfNotFound: true);
        m_ChatVoice_Voice = m_ChatVoice.FindAction("Voice", throwIfNotFound: true);
        // Weapon
        m_Weapon = asset.FindActionMap("Weapon", throwIfNotFound: true);
        m_Weapon_Fire = m_Weapon.FindAction("Fire", throwIfNotFound: true);
        m_Weapon_ADS = m_Weapon.FindAction("ADS", throwIfNotFound: true);
        m_Weapon_PrimaryWeapon = m_Weapon.FindAction("PrimaryWeapon", throwIfNotFound: true);
        m_Weapon_SecondaryWeapon = m_Weapon.FindAction("SecondaryWeapon", throwIfNotFound: true);
        m_Weapon_Knife = m_Weapon.FindAction("Knife", throwIfNotFound: true);
        m_Weapon_BuyScreen = m_Weapon.FindAction("BuyScreen", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GroundMovement
    private readonly InputActionMap m_GroundMovement;
    private List<IGroundMovementActions> m_GroundMovementActionsCallbackInterfaces = new List<IGroundMovementActions>();
    private readonly InputAction m_GroundMovement_Horizontal;
    private readonly InputAction m_GroundMovement_Jump;
    private readonly InputAction m_GroundMovement_Slide;
    private readonly InputAction m_GroundMovement_MouseX;
    private readonly InputAction m_GroundMovement_MouseY;
    private readonly InputAction m_GroundMovement_Dash;
    public struct GroundMovementActions
    {
        private @PlayerControls m_Wrapper;
        public GroundMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_GroundMovement_Horizontal;
        public InputAction @Jump => m_Wrapper.m_GroundMovement_Jump;
        public InputAction @Slide => m_Wrapper.m_GroundMovement_Slide;
        public InputAction @MouseX => m_Wrapper.m_GroundMovement_MouseX;
        public InputAction @MouseY => m_Wrapper.m_GroundMovement_MouseY;
        public InputAction @Dash => m_Wrapper.m_GroundMovement_Dash;
        public InputActionMap Get() { return m_Wrapper.m_GroundMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundMovementActions set) { return set.Get(); }
        public void AddCallbacks(IGroundMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_GroundMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GroundMovementActionsCallbackInterfaces.Add(instance);
            @Horizontal.started += instance.OnHorizontal;
            @Horizontal.performed += instance.OnHorizontal;
            @Horizontal.canceled += instance.OnHorizontal;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Slide.started += instance.OnSlide;
            @Slide.performed += instance.OnSlide;
            @Slide.canceled += instance.OnSlide;
            @MouseX.started += instance.OnMouseX;
            @MouseX.performed += instance.OnMouseX;
            @MouseX.canceled += instance.OnMouseX;
            @MouseY.started += instance.OnMouseY;
            @MouseY.performed += instance.OnMouseY;
            @MouseY.canceled += instance.OnMouseY;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IGroundMovementActions instance)
        {
            @Horizontal.started -= instance.OnHorizontal;
            @Horizontal.performed -= instance.OnHorizontal;
            @Horizontal.canceled -= instance.OnHorizontal;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Slide.started -= instance.OnSlide;
            @Slide.performed -= instance.OnSlide;
            @Slide.canceled -= instance.OnSlide;
            @MouseX.started -= instance.OnMouseX;
            @MouseX.performed -= instance.OnMouseX;
            @MouseX.canceled -= instance.OnMouseX;
            @MouseY.started -= instance.OnMouseY;
            @MouseY.performed -= instance.OnMouseY;
            @MouseY.canceled -= instance.OnMouseY;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IGroundMovementActions instance)
        {
            if (m_Wrapper.m_GroundMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGroundMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_GroundMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GroundMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GroundMovementActions @GroundMovement => new GroundMovementActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_toggleMenu;
    private readonly InputAction m_UI_Scoreboard;
    public struct UIActions
    {
        private @PlayerControls m_Wrapper;
        public UIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @toggleMenu => m_Wrapper.m_UI_toggleMenu;
        public InputAction @Scoreboard => m_Wrapper.m_UI_Scoreboard;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @toggleMenu.started += instance.OnToggleMenu;
            @toggleMenu.performed += instance.OnToggleMenu;
            @toggleMenu.canceled += instance.OnToggleMenu;
            @Scoreboard.started += instance.OnScoreboard;
            @Scoreboard.performed += instance.OnScoreboard;
            @Scoreboard.canceled += instance.OnScoreboard;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @toggleMenu.started -= instance.OnToggleMenu;
            @toggleMenu.performed -= instance.OnToggleMenu;
            @toggleMenu.canceled -= instance.OnToggleMenu;
            @Scoreboard.started -= instance.OnScoreboard;
            @Scoreboard.performed -= instance.OnScoreboard;
            @Scoreboard.canceled -= instance.OnScoreboard;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Chat/Voice
    private readonly InputActionMap m_ChatVoice;
    private List<IChatVoiceActions> m_ChatVoiceActionsCallbackInterfaces = new List<IChatVoiceActions>();
    private readonly InputAction m_ChatVoice_Chat;
    private readonly InputAction m_ChatVoice_Voice;
    public struct ChatVoiceActions
    {
        private @PlayerControls m_Wrapper;
        public ChatVoiceActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Chat => m_Wrapper.m_ChatVoice_Chat;
        public InputAction @Voice => m_Wrapper.m_ChatVoice_Voice;
        public InputActionMap Get() { return m_Wrapper.m_ChatVoice; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChatVoiceActions set) { return set.Get(); }
        public void AddCallbacks(IChatVoiceActions instance)
        {
            if (instance == null || m_Wrapper.m_ChatVoiceActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChatVoiceActionsCallbackInterfaces.Add(instance);
            @Chat.started += instance.OnChat;
            @Chat.performed += instance.OnChat;
            @Chat.canceled += instance.OnChat;
            @Voice.started += instance.OnVoice;
            @Voice.performed += instance.OnVoice;
            @Voice.canceled += instance.OnVoice;
        }

        private void UnregisterCallbacks(IChatVoiceActions instance)
        {
            @Chat.started -= instance.OnChat;
            @Chat.performed -= instance.OnChat;
            @Chat.canceled -= instance.OnChat;
            @Voice.started -= instance.OnVoice;
            @Voice.performed -= instance.OnVoice;
            @Voice.canceled -= instance.OnVoice;
        }

        public void RemoveCallbacks(IChatVoiceActions instance)
        {
            if (m_Wrapper.m_ChatVoiceActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChatVoiceActions instance)
        {
            foreach (var item in m_Wrapper.m_ChatVoiceActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChatVoiceActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChatVoiceActions @ChatVoice => new ChatVoiceActions(this);

    // Weapon
    private readonly InputActionMap m_Weapon;
    private List<IWeaponActions> m_WeaponActionsCallbackInterfaces = new List<IWeaponActions>();
    private readonly InputAction m_Weapon_Fire;
    private readonly InputAction m_Weapon_ADS;
    private readonly InputAction m_Weapon_PrimaryWeapon;
    private readonly InputAction m_Weapon_SecondaryWeapon;
    private readonly InputAction m_Weapon_Knife;
    private readonly InputAction m_Weapon_BuyScreen;
    public struct WeaponActions
    {
        private @PlayerControls m_Wrapper;
        public WeaponActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_Weapon_Fire;
        public InputAction @ADS => m_Wrapper.m_Weapon_ADS;
        public InputAction @PrimaryWeapon => m_Wrapper.m_Weapon_PrimaryWeapon;
        public InputAction @SecondaryWeapon => m_Wrapper.m_Weapon_SecondaryWeapon;
        public InputAction @Knife => m_Wrapper.m_Weapon_Knife;
        public InputAction @BuyScreen => m_Wrapper.m_Weapon_BuyScreen;
        public InputActionMap Get() { return m_Wrapper.m_Weapon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponActionsCallbackInterfaces.Add(instance);
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @ADS.started += instance.OnADS;
            @ADS.performed += instance.OnADS;
            @ADS.canceled += instance.OnADS;
            @PrimaryWeapon.started += instance.OnPrimaryWeapon;
            @PrimaryWeapon.performed += instance.OnPrimaryWeapon;
            @PrimaryWeapon.canceled += instance.OnPrimaryWeapon;
            @SecondaryWeapon.started += instance.OnSecondaryWeapon;
            @SecondaryWeapon.performed += instance.OnSecondaryWeapon;
            @SecondaryWeapon.canceled += instance.OnSecondaryWeapon;
            @Knife.started += instance.OnKnife;
            @Knife.performed += instance.OnKnife;
            @Knife.canceled += instance.OnKnife;
            @BuyScreen.started += instance.OnBuyScreen;
            @BuyScreen.performed += instance.OnBuyScreen;
            @BuyScreen.canceled += instance.OnBuyScreen;
        }

        private void UnregisterCallbacks(IWeaponActions instance)
        {
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @ADS.started -= instance.OnADS;
            @ADS.performed -= instance.OnADS;
            @ADS.canceled -= instance.OnADS;
            @PrimaryWeapon.started -= instance.OnPrimaryWeapon;
            @PrimaryWeapon.performed -= instance.OnPrimaryWeapon;
            @PrimaryWeapon.canceled -= instance.OnPrimaryWeapon;
            @SecondaryWeapon.started -= instance.OnSecondaryWeapon;
            @SecondaryWeapon.performed -= instance.OnSecondaryWeapon;
            @SecondaryWeapon.canceled -= instance.OnSecondaryWeapon;
            @Knife.started -= instance.OnKnife;
            @Knife.performed -= instance.OnKnife;
            @Knife.canceled -= instance.OnKnife;
            @BuyScreen.started -= instance.OnBuyScreen;
            @BuyScreen.performed -= instance.OnBuyScreen;
            @BuyScreen.canceled -= instance.OnBuyScreen;
        }

        public void RemoveCallbacks(IWeaponActions instance)
        {
            if (m_Wrapper.m_WeaponActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponActions @Weapon => new WeaponActions(this);
    public interface IGroundMovementActions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSlide(InputAction.CallbackContext context);
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnToggleMenu(InputAction.CallbackContext context);
        void OnScoreboard(InputAction.CallbackContext context);
    }
    public interface IChatVoiceActions
    {
        void OnChat(InputAction.CallbackContext context);
        void OnVoice(InputAction.CallbackContext context);
    }
    public interface IWeaponActions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnADS(InputAction.CallbackContext context);
        void OnPrimaryWeapon(InputAction.CallbackContext context);
        void OnSecondaryWeapon(InputAction.CallbackContext context);
        void OnKnife(InputAction.CallbackContext context);
        void OnBuyScreen(InputAction.CallbackContext context);
    }
}
